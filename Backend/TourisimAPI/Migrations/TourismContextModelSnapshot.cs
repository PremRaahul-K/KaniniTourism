// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourismAPI.Models.Context;

#nullable disable

namespace TourismAPI.Migrations
{
    [DbContext(typeof(TourismContext))]
    partial class TourismContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TourismAPI.Models.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourItineraryId")
                        .HasColumnType("int");

                    b.HasKey("AccommodationId");

                    b.HasIndex("TourItineraryId")
                        .IsUnique();

                    b.ToTable("Accommodations");
                });

            modelBuilder.Entity("TourismAPI.Models.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryId"), 1L, 1);

                    b.Property<string>("ActivityTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourItineraryId")
                        .HasColumnType("int");

                    b.HasKey("ItineraryId");

                    b.HasIndex("TourItineraryId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("TourismAPI.Models.PickupLocation", b =>
                {
                    b.Property<int>("PickupLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PickupLocationId"), 1L, 1);

                    b.Property<string>("PickupLocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickupTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("PickupLocationId");

                    b.HasIndex("TourId");

                    b.ToTable("PickupLocations");
                });

            modelBuilder.Entity("TourismAPI.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodAccommodation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelAgentId")
                        .HasColumnType("int");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TourismAPI.Models.TourDate", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateId"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("DateId");

                    b.HasIndex("TourId");

                    b.ToTable("TourDates");
                });

            modelBuilder.Entity("TourismAPI.Models.TourItinerary", b =>
                {
                    b.Property<int>("TourItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourItineraryId"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourItineraryId");

                    b.HasIndex("TourId");

                    b.ToTable("TourItineraries");
                });

            modelBuilder.Entity("TourismAPI.Models.Accommodation", b =>
                {
                    b.HasOne("TourismAPI.Models.TourItinerary", "TourItinerary")
                        .WithOne("Accommodation")
                        .HasForeignKey("TourismAPI.Models.Accommodation", "TourItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourItinerary");
                });

            modelBuilder.Entity("TourismAPI.Models.Itinerary", b =>
                {
                    b.HasOne("TourismAPI.Models.TourItinerary", "TourItinerary")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourItinerary");
                });

            modelBuilder.Entity("TourismAPI.Models.PickupLocation", b =>
                {
                    b.HasOne("TourismAPI.Models.Tour", null)
                        .WithMany("PickupLocation")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("TourismAPI.Models.TourDate", b =>
                {
                    b.HasOne("TourismAPI.Models.Tour", "Tour")
                        .WithMany("TourDates")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourismAPI.Models.TourItinerary", b =>
                {
                    b.HasOne("TourismAPI.Models.Tour", "Tour")
                        .WithMany("TourItinerary")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourismAPI.Models.Tour", b =>
                {
                    b.Navigation("PickupLocation");

                    b.Navigation("TourDates");

                    b.Navigation("TourItinerary");
                });

            modelBuilder.Entity("TourismAPI.Models.TourItinerary", b =>
                {
                    b.Navigation("Accommodation");

                    b.Navigation("Itineraries");
                });
#pragma warning restore 612, 618
        }
    }
}
